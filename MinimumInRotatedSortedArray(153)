LeetCode-153:  Here the sorted array will be sorted and rotated at some point of the array. We need to return the minimum value in the array
// Solution1 : (Brute force approach)
// Here we use linaer search algorith. It will be O(n) time complexity
class Solution {
    public int findMin(int[] nums) {
        int n=nums.length;
        int min = Integer.MAX_VALUE;
        for(int i=0 ; i<n ; i++){
            if(nums[i]<min)
                min=nums[i];
        }
        return min;
    }
}

//Solution2 : (Optimal approach)
class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int low = 0, high = n-1;

        while(low<high){
            int mid = low+(high-low)/2;
            if(nums[mid]>nums[high]){
                low = mid+1;
            }
            else{
                high = mid;
            }     
        }
        return nums[low];
    }
}
// Here we use binary search technique. 

// Solution3 : (optimal technique2)
class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int low=0, high = n-1, ans = Integer.MAX_VALUE;

        while(low<=high){
            int mid = low + (high - low) / 2;
            if(nums[low]<=nums[mid]){
                ans = Math.min(ans, nums[low]);
                low = mid+1;
            }
            else{
                ans = Math.min(ans, nums[mid]);
                high = mid-1;
            }
        }
        return ans;
    }
}
