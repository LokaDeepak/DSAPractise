class Solution{
    public int search(int nums[], int target){
        int n = nums.length;

        int low = 0, high = n-1;
        while(low<=high){
            int mid = (low+high)/2;

            if(nums[mid] == target){
                return mid;
            }
            // if left is sorted
            if(nums[low]<=nums[mid]){
                if(nums[low]<=target && target<=nums[mid]){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
            //right is sorted
            else{
                if(nums[mid]<=target && target<=nums[high]){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
        }
        return -1;
    }
}

//This is Leetcode-33. Here we have a sorted array with n elements. The twist is array will be rotated at some point i.e 
//If the array is : nums[] = {1,2,3,4,5,6}
// The rotated sorted array will be: nums[] = {3,4,5,6,1,2}. Here the pivot index is 1 bcz it is rotated after 2 elements.
// We find a mid point and checks whether the left part or right part is sorted and tset if the target is in sorted or unsorted part and eleminates another part of an array.
