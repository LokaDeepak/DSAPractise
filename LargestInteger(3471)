import java.util.*;

class Solution {
    public int largestInteger(int[] nums, int k) {
        Map<Integer, Integer> count = new HashMap<>();
        int n = nums.length;
        // To go until n-kth element
        for (int i = 0; i <= n - k; i++) {
            Set<Integer> seen = new HashSet<>();
            // to set the window size
            for (int j = i; j < i + k; j++) {
                seen.add(nums[j]);
            }
            // to fetch the value from the hashset and count it. Counting starts from 0 and adds by 1 for 1 occurence
            for (int num : seen) {
                count.put(num, count.getOrDefault(num, 0) + 1);
            }
        }
        int max = -1;
        for (int num : count.keySet()) {
            if (count.get(num) == 1) {
                max = Math.max(max, num);
            }
        }
        return max;
    }
}

//This is leetcode-3471. Here, we neddto make the n number of subarrays of k elements. After preparing the subarrays we need to find the number which is occured at only ome subarray. Then we need to return the same integer.
// If there are two or more integers that occured more than once then we need to return the maximunm valued integer. If there is no such imteger then we need to return -1.
// In order to do this task, We use hashset concept, we store the number asa key and the frequency of that number in subarray is stored in value.
// We use sliding window concept
